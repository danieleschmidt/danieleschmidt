[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "terragon-sdlc"
version = "1.0.0"
description = "Terragon-Optimized SDLC Implementation with Autonomous Execution"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "Daniel Schmidt", email = "danschmidt88@gmail.com"},
]
maintainers = [
    {name = "Terragon Labs", email = "noreply@terragon.ai"},
]
keywords = [
    "sdlc", "automation", "wsjf", "bioneuro", "olfactory", "devops", 
    "quality-gates", "security", "monitoring", "neuromorphic"
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: System :: Monitoring",
    "Topic :: Software Development :: Quality Assurance",
]
requires-python = ">=3.8"
dependencies = [
    "numpy>=1.21.0",
    "pandas>=1.3.0",
    "pyyaml>=6.0",
    "psutil>=5.8.0",
    "requests>=2.25.0",
    "scipy>=1.7.0",
    "aiofiles>=0.7.0",
    "httpx>=0.24.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-mock>=3.10.0",
    "black>=22.0.0",
    "isort>=5.10.0",
    "flake8>=5.0.0",
    "mypy>=1.0.0",
    "pylint>=2.15.0",
    "bandit>=1.7.0",
    "safety>=2.0.0",
    "pre-commit>=2.20.0",
    "tox>=4.0.0",
]
docs = [
    "sphinx>=4.5.0",
    "sphinx-rtd-theme>=1.0.0",
    "myst-parser>=0.18.0",
]
ml = [
    "scikit-learn>=1.0.0",
    "torch>=1.12.0",
    "tensorflow>=2.9.0",
]
quantum = [
    "qiskit>=0.39.0",
    "cirq>=0.15.0",
]
cloud = [
    "docker>=6.0.0",
    "kubernetes>=24.0.0",
]
all = [
    "terragon-sdlc[dev,docs,ml,quantum,cloud]"
]

[project.urls]
"Homepage" = "https://github.com/danieleschmidt/terragon-sdlc"
"Bug Reports" = "https://github.com/danieleschmidt/terragon-sdlc/issues"
"Source" = "https://github.com/danieleschmidt/terragon-sdlc"
"Documentation" = "https://terragon-sdlc.readthedocs.io"

[project.scripts]
terragon-backlog = "src.backlog_manager:main"
terragon-wsjf = "src.wsjf_engine:main"
terragon-security = "src.security_scanner:main"
terragon-quality = "src.quality_gates:main"
terragon-monitor = "src.monitoring_framework:main"
terragon-fusion = "src.bioneuro_olfactory_fusion:main"

[tool.setuptools]
package-dir = {"" = "."}

[tool.setuptools.packages.find]
where = ["."]
include = ["src*", "tests*"]
exclude = ["build*", "dist*", "*.egg-info*"]

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml",
    "--cov-fail-under=85",
    "--strict-markers",
    "--strict-config",
    "-ra",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "e2e: End-to-end tests",
    "slow: Slow tests",
    "security: Security tests",
    "performance: Performance tests",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__init__.py",
    "*/conftest.py",
]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.black]
line-length = 100
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 100
known_first_party = ["src", "tests"]
known_third_party = ["numpy", "pandas", "yaml", "psutil", "requests"]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "scipy.*",
    "sklearn.*",
    "torch.*",
    "tensorflow.*",
    "qiskit.*",
    "cirq.*",
]
ignore_missing_imports = true

[tool.pylint]
max-line-length = 100
disable = [
    "missing-docstring",
    "too-few-public-methods",
    "too-many-arguments",
    "too-many-instance-attributes",
    "too-many-locals",
]

[tool.bandit]
exclude_dirs = ["tests", "build", "dist"]
skips = ["B101", "B601"]

[tool.flake8]
max-line-length = 100
extend-ignore = ["E203", "W503"]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    "*.egg-info",
    ".venv",
    ".tox",
]

[tool.tox]
legacy_tox_ini = """
[tox]
envlist = py38,py39,py310,py311,py312,lint,security,docs
isolated_build = true

[testenv]
deps = .[dev]
commands = pytest {posargs}

[testenv:lint]
deps = .[dev]
commands = 
    black --check src tests
    isort --check-only src tests
    flake8 src tests
    mypy src
    pylint src

[testenv:security]
deps = .[dev]
commands = 
    bandit -r src
    safety check

[testenv:docs]
deps = .[docs]
commands = sphinx-build -W -b html docs docs/_build/html

[testenv:coverage]
deps = .[dev]
commands = 
    pytest --cov=src --cov-report=html --cov-report=term
"""